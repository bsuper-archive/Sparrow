// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: sparrow.proto at 18:1
package me.bsu.brianandysparrow.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Control message sent between the client and server before data exchange.
 */
public final class Handshake extends Message<Handshake, Handshake.Builder> {
  public static final ProtoAdapter<Handshake> ADAPTER = new ProtoAdapter_Handshake();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_UUID = "";

  /**
   * A list of features that the sender of the message supports.
   */
  @WireField(
      tag = 1,
      adapter = "me.bsu.brianandysparrow.proto.Feature#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Feature> features;

  /**
   * DO NOT CHANGE ANYTHING ABOVE THIS LINE.
   * FILL IN (IF NEEDED)
   * sender uuid
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String uuid;

  /**
   * current vector clocks
   */
  @WireField(
      tag = 3,
      adapter = "me.bsu.brianandysparrow.proto.VectorClockItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<VectorClockItem> vectorClocks;

  public Handshake(List<Feature> features, String uuid, List<VectorClockItem> vectorClocks) {
    this(features, uuid, vectorClocks, ByteString.EMPTY);
  }

  public Handshake(List<Feature> features, String uuid, List<VectorClockItem> vectorClocks, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.features = Internal.immutableCopyOf("features", features);
    this.uuid = uuid;
    this.vectorClocks = Internal.immutableCopyOf("vectorClocks", vectorClocks);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.features = Internal.copyOf("features", features);
    builder.uuid = uuid;
    builder.vectorClocks = Internal.copyOf("vectorClocks", vectorClocks);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Handshake)) return false;
    Handshake o = (Handshake) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(features, o.features)
        && Internal.equals(uuid, o.uuid)
        && Internal.equals(vectorClocks, o.vectorClocks);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (features != null ? features.hashCode() : 1);
      result = result * 37 + (uuid != null ? uuid.hashCode() : 0);
      result = result * 37 + (vectorClocks != null ? vectorClocks.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (features != null) builder.append(", features=").append(features);
    if (uuid != null) builder.append(", uuid=").append(uuid);
    if (vectorClocks != null) builder.append(", vectorClocks=").append(vectorClocks);
    return builder.replace(0, 2, "Handshake{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Handshake, Builder> {
    public List<Feature> features;

    public String uuid;

    public List<VectorClockItem> vectorClocks;

    public Builder() {
      features = Internal.newMutableList();
      vectorClocks = Internal.newMutableList();
    }

    /**
     * A list of features that the sender of the message supports.
     */
    public Builder features(List<Feature> features) {
      Internal.checkElementsNotNull(features);
      this.features = features;
      return this;
    }

    /**
     * DO NOT CHANGE ANYTHING ABOVE THIS LINE.
     * FILL IN (IF NEEDED)
     * sender uuid
     */
    public Builder uuid(String uuid) {
      this.uuid = uuid;
      return this;
    }

    /**
     * current vector clocks
     */
    public Builder vectorClocks(List<VectorClockItem> vectorClocks) {
      Internal.checkElementsNotNull(vectorClocks);
      this.vectorClocks = vectorClocks;
      return this;
    }

    @Override
    public Handshake build() {
      if (uuid == null) {
        throw Internal.missingRequiredFields(uuid, "uuid");
      }
      return new Handshake(features, uuid, vectorClocks, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Handshake extends ProtoAdapter<Handshake> {
    ProtoAdapter_Handshake() {
      super(FieldEncoding.LENGTH_DELIMITED, Handshake.class);
    }

    @Override
    public int encodedSize(Handshake value) {
      return Feature.ADAPTER.asRepeated().encodedSizeWithTag(1, value.features)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.uuid)
          + VectorClockItem.ADAPTER.asRepeated().encodedSizeWithTag(3, value.vectorClocks)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Handshake value) throws IOException {
      if (value.features != null) Feature.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.features);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.uuid);
      if (value.vectorClocks != null) VectorClockItem.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.vectorClocks);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Handshake decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: {
            try {
              builder.features.add(Feature.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 2: builder.uuid(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.vectorClocks.add(VectorClockItem.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Handshake redact(Handshake value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.vectorClocks, VectorClockItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
